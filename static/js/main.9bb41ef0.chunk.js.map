{"version":3,"sources":["components/Chats/Chats.js","components/Chat/Chat.js","components/SearchChat/SearchChat.js","components/SendMessage/SendMessage.js","containers/ChatContainer/actions.js","containers/ChatContainer/actionTypes.js","containers/ChatContainer/ChatContainer.js","pages/HomePage/HomePage.js","containers/ChatContainer/reducer.js","store/reducers.js","helpers/getRandomIntInclusive.js","containers/ChatContainer/sagas.js","store/sagas.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["Chats","props","searchedUsersList","searchedMessagesList","chatsList","chats","chooseChat","searchedMessages","searchedUsers","sortedChatsByTime","Array","from","sort","a","b","messageHistory","length","date","localeCompare","map","chat","lastMessage","class","onClick","userId","key","style","backgroundImage","userImg","username","isAuthor","text","moment","format","message","Chat","sendMessage","selectedChatId","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","block","inline","ref","lastIndex","chatHistory","index","messageId","SearchChat","handleSearch","searchChatValue","type","placeholder","value","onChange","event","SendMessage","useState","setMessage","target","onKeyDown","preventDefault","changeChat","payload","mapDispatchToProps","actions","connect","state","setSearchChatValue","setSelectedChatId","filteredMessageHistory","filter","includes","currentChat","HomePage","initialState","isChatting","chatReducer","newMessage","v4","Date","toISOString","newChats","combineReducers","getRandomIntInclusive","min","max","Math","ceil","floor","random","getRandomAnswer","watchGetRandomAnswer","chatSaga","put","call","axios","get","response","answer","data","delay","takeEvery","all","rootSaga","saga","createSagaMiddleware","persistedState","localStorage","getItem","JSON","parse","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","store","createStore","reducers","subscribe","setItem","stringify","getState","run","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9bb41ef0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst Chats = (props) => {\r\n  const { chats, chooseChat, searchedMessages, searchedUsers } = props;\r\n\r\n  const sortedChatsByTime = Array.from(chats).sort((a, b) =>\r\n    b.messageHistory[b.messageHistory.length - 1].date.localeCompare(\r\n      a.messageHistory[a.messageHistory.length - 1].date\r\n    )\r\n  );\r\n\r\n  let searchedUsersList;\r\n\r\n  if (searchedUsers) {\r\n    searchedUsersList = searchedUsers.map((chat) => {\r\n      const lastMessage = chat.messageHistory.length - 1;\r\n      return (\r\n        <div\r\n          class=\"chats__dialog\"\r\n          onClick={() => chooseChat(chat.userId)}\r\n          key={chat.userId}\r\n        >\r\n          <div\r\n            class=\"dialog__photo\"\r\n            style={{ backgroundImage: `url(${chat.userImg})` }}\r\n          ></div>\r\n          <div class=\"dialog__name-message\">\r\n            <div class=\"dialog__name\">{chat.username}</div>\r\n            <div class=\"dialog__message\">\r\n              {`${chat.messageHistory[lastMessage].isAuthor ? \"You: \" : \"\"}${\r\n                chat.messageHistory[lastMessage].text\r\n              }`}\r\n            </div>\r\n          </div>\r\n          <div class=\"dialog__date\">\r\n            <span>\r\n              {moment(chat.messageHistory[lastMessage].date).format(\r\n                \"MMM D,YYYY\"\r\n              )}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  let searchedMessagesList;\r\n\r\n  if (searchedMessages) {\r\n    searchedMessagesList = searchedMessages.map((chat) => {\r\n      return chat.messageHistory.map((message) => {\r\n        return (\r\n          <div\r\n            class=\"chats__dialog\"\r\n            onClick={() => chooseChat(chat.userId)}\r\n            key={chat.userId}\r\n          >\r\n            <div\r\n              class=\"dialog__photo\"\r\n              style={{ backgroundImage: `url(${chat.userImg})` }}\r\n            ></div>\r\n            <div class=\"dialog__name-message\">\r\n              <div class=\"dialog__name\">{chat.username}</div>\r\n              <div class=\"dialog__message\">\r\n                {`${message.isAuthor ? \"You: \" : \"\"}${message.text}`}\r\n              </div>\r\n            </div>\r\n            <div class=\"dialog__date\">\r\n              <span>{moment(message.date).format(\"MMM D,YYYY\")}</span>\r\n            </div>\r\n          </div>\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  let chatsList;\r\n\r\n  if (!searchedMessages && !searchedUsers) {\r\n    chatsList = sortedChatsByTime.map((chat) => {\r\n      const lastMessage = chat.messageHistory.length - 1;\r\n      return (\r\n        <div\r\n          class=\"chats__dialog\"\r\n          onClick={() => chooseChat(chat.userId)}\r\n          key={chat.userId}\r\n        >\r\n          <div\r\n            class=\"dialog__photo\"\r\n            style={{ backgroundImage: `url(${chat.userImg})` }}\r\n          ></div>\r\n          <div class=\"dialog__name-message\">\r\n            <div class=\"dialog__name\">{chat.username}</div>\r\n            <div class=\"dialog__message\">\r\n              {`${chat.messageHistory[lastMessage].isAuthor ? \"You: \" : \"\"}${\r\n                chat.messageHistory[lastMessage].text\r\n              }`}\r\n            </div>\r\n          </div>\r\n          <div class=\"dialog__date\">\r\n            <span>\r\n              {moment(chat.messageHistory[lastMessage].date).format(\r\n                \"MMM D,YYYY\"\r\n              )}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div class=\"chats\">\r\n      <div class=\"chats__header\">\r\n        <span>Chats</span>\r\n      </div>\r\n      {chatsList}\r\n      {!!searchedUsersList && <p>Contacts:</p>}\r\n      {searchedUsersList}\r\n      {!!searchedMessagesList && <p>Messages:</p>}\r\n      {searchedMessagesList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chats;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport { SendMessage } from \"../index\";\r\nimport \"./styles.css\";\r\n\r\nconst Chat = (props) => {\r\n  const { chat, sendMessage, selectedChatId, messageHistory } = props;\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView({\r\n      behavior: \"smooth\",\r\n      block: \"nearest\",\r\n      inline: \"start\",\r\n    });\r\n  };\r\n  const scrollToBottomFast = () => {\r\n    messagesEndRef.current.scrollIntoView({\r\n      behavior: \"auto\",\r\n      block: \"nearest\",\r\n      inline: \"start\",\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    scrollToBottomFast();\r\n  }, [selectedChatId]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messageHistory]);\r\n\r\n  if (chat === null) {\r\n    return (\r\n      <div class=\"chat\">\r\n        <div class=\"chat__empty\" ref={messagesEndRef}>\r\n          <p class=\"chat__empty-text\">\r\n            Please select a chat to start messaging\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  const lastIndex = chat.messageHistory.length - 1;\r\n\r\n  const chatHistory = chat.messageHistory.map((message, index) => {\r\n    if (message.isAuthor) {\r\n      return (\r\n        <div class=\"chat-history__message_self\" key={message.messageId}>\r\n          <div class=\"chat-history__message-photo_self\"></div>\r\n          <div class=\"chat-history__message-wrapper\">\r\n            <div class=\"chat-history__message-text_self\">\r\n              <span>{message.text}</span>\r\n            </div>\r\n            <div class=\"chat-history__date\">\r\n              <span class=\"chat-history__date_self\">\r\n                {moment(message.date).format(\"M/DD/YY LT\")}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          {lastIndex === index && <div ref={messagesEndRef} class=\"ref\" />}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div class=\"chat-history__message\" key={message.messageId}>\r\n          <div\r\n            class=\"chat-history__message-photo\"\r\n            style={{ backgroundImage: `url(${chat.userImg})` }}\r\n          ></div>\r\n          <div class=\"chat-history__message-wrapper\">\r\n            <div class=\"chat-history__message-text\">\r\n              <span>{message.text}</span>\r\n            </div>\r\n            <div class=\"chat-history__date\">\r\n              <span>{moment(message.date).format(\"M/DD/YY LT\")}</span>\r\n            </div>\r\n          </div>\r\n          {lastIndex === index && <div ref={messagesEndRef} class=\"ref\" />}\r\n        </div>\r\n      );\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div class=\"chat\">\r\n      <div class=\"chat-header\">\r\n        <div\r\n          class=\"chat-header__photo\"\r\n          style={{ backgroundImage: `url(${chat.userImg})` }}\r\n        ></div>\r\n        <div class=\"chat-header__name\">\r\n          <span>{chat.username}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"chat-history\">{chatHistory}</div>\r\n      <SendMessage sendMessage={sendMessage} userId={chat.userId} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst SearchChat = (props) => {\r\n  const { handleSearch, searchChatValue } = props;\r\n  return (\r\n    <div class=\"search-chat\">\r\n      <div class=\"search-chat__my-photo\"></div>\r\n      <div class=\"search-chat__panel\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search or start new chat\"\r\n          class=\"search-chat__input\"\r\n          value={searchChatValue}\r\n          onChange={(event) => handleSearch(event)}\r\n        ></input>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchChat;\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst SendMessage = (props) => {\r\n  const { sendMessage, userId } = props;\r\n  const [message, setMessage] = useState();\r\n\r\n  const handleChange = (event) => {\r\n    setMessage(event.target.value);\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      sendMessage(userId, message);\r\n      setMessage(\"\");\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div class=\"send-message__panel\">\r\n        <textarea\r\n          class=\"send-message__input\"\r\n          placeholder=\"Type your message\"\r\n          value={message}\r\n          onChange={handleChange}\r\n          onKeyDown={handleKeyDown}\r\n        ></textarea>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SendMessage;\r\n","import { CHANGE_CHAT, SEND_MESSAGE } from \"./actionTypes\";\r\n\r\nexport const changeChat = (userId) => {\r\n  return {\r\n    type: CHANGE_CHAT,\r\n    payload: { userId },\r\n  };\r\n};\r\n\r\nexport const sendMessage = (userId, message) => {\r\n  return {\r\n    type: SEND_MESSAGE,\r\n    payload: { userId, message },\r\n  };\r\n};\r\n","export const CHANGE_CHAT = \"CHANGE_CHAT\";\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\r\nexport const SEND_MESSAGE_SUCCESS = \"SEND_MESSAGE_SUCCESS\";\r\nexport const GET_RANDOM_ANSWER_SUCCESS = \"GET_RANDOM_ANSWER_SUCCESS\";\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Chats, Chat, SearchChat } from \"../../components\";\r\nimport * as actions from \"./actions\";\r\nimport \"./styles.css\";\r\n\r\nconst ChatContainer = (props) => {\r\n  const { chats, sendMessage } = props;\r\n  const [searchChatValue, setSearchChatValue] = useState(\"\");\r\n  const [selectedChatId, setSelectedChatId] = useState(\"\");\r\n\r\n  const chooseChat = (userId) => {\r\n    setSelectedChatId(userId);\r\n  };\r\n\r\n  const handleSearch = (event) => {\r\n    setSearchChatValue(event.target.value);\r\n  };\r\n\r\n  let searchedMessages;\r\n  let searchedUsers;\r\n\r\n  if (searchChatValue) {\r\n    searchedMessages = chats.map((chat) => {\r\n      const filteredMessageHistory = chat.messageHistory.filter((message) => {\r\n        return message.text.includes(searchChatValue);\r\n      });\r\n      return {\r\n        ...chat,\r\n        messageHistory: filteredMessageHistory,\r\n      };\r\n    });\r\n    searchedUsers = chats.filter((chat) =>\r\n      chat.username.includes(searchChatValue)\r\n    );\r\n  } else {\r\n    searchedMessages = null;\r\n    searchedUsers = null;\r\n  }\r\n\r\n  const currentChat = chats.filter((chat) => {\r\n    return chat.userId === selectedChatId;\r\n  })[0];\r\n\r\n  return (\r\n    <div class=\"main\">\r\n      <div class=\"left-side\">\r\n        <SearchChat\r\n          handleSearch={handleSearch}\r\n          searchChatValue={searchChatValue}\r\n        />\r\n        <Chats\r\n          chats={chats}\r\n          chooseChat={chooseChat}\r\n          searchedMessages={searchedMessages}\r\n          searchedUsers={searchedUsers}\r\n        />\r\n      </div>\r\n      <div class=\"right-side\">\r\n        <Chat\r\n          selectedChatId={selectedChatId}\r\n          messageHistory={currentChat?.messageHistory}\r\n          chat={currentChat || null}\r\n          sendMessage={sendMessage}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    chats: state.chat.chats,\r\n    selectedChatId: state.chat.selectedChatId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  ...actions,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatContainer);\r\n","import React from \"react\";\r\n\r\nimport { ChatContainer } from \"../../containers\";\r\n\r\nconst HomePage = () => <ChatContainer />;\r\n\r\nexport default HomePage;\r\n","import {\r\n  CHANGE_CHAT,\r\n  SEND_MESSAGE_SUCCESS,\r\n  GET_RANDOM_ANSWER_SUCCESS,\r\n} from \"./actionTypes\";\r\n\r\nimport { v4 } from \"uuid\";\r\n\r\nconst initialState = {\r\n  chats: [\r\n    {\r\n      userId: \"a5c49ba2-494b-4fc9-95fb-71caaeb37341\",\r\n      userImg:\r\n        \"https://images.unsplash.com/photo-1544005313-94ddf0286df2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80\",\r\n      username: \"Alice Freeman\",\r\n      messageHistory: [\r\n        {\r\n          messageId: \"a5c49ba2-494b-4fc9-95fb-71caaeb37342\",\r\n          text: \"yoy are the worst\",\r\n          isAuthor: false,\r\n          date: \"2020-10-01T21:21:27.413Z\",\r\n        },\r\n        {\r\n          messageId: \"a5c49ba2-494b-4fc9-95fb-71caaeb37343\",\r\n          text: \"yes i know\",\r\n          isAuthor: true,\r\n          date: \"2020-10-01T21:21:28.413Z\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      userId: \"a5c49ba2-494b-4fc9-95fb-71caaeb37140\",\r\n      userImg:\r\n        \"https://images.pexels.com/photos/415829/pexels-photo-415829.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\",\r\n      username: \"Josefina\",\r\n      messageHistory: [\r\n        {\r\n          messageId: \"a5c49ba2-494b-4fc9-95fb-71caaeb37141\",\r\n          text: \"We are losing money! Quick!\",\r\n          isAuthor: false,\r\n          date: \"2020-10-01T20:21:27.413Z\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      userId: \"a5c49ba2-494b-4fc9-95fb-71caaeb37141\",\r\n      userImg:\r\n        \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Donald_Trump_official_portrait.jpg/1200px-Donald_Trump_official_portrait.jpg\",\r\n      username: \"Donald Trump\",\r\n      messageHistory: [\r\n        {\r\n          messageId: \"a5c49ba2-494b-4fc9-95fb-71caaeb37141\",\r\n          text: \"Just vote!\",\r\n          isAuthor: false,\r\n          date: \"2020-10-01T20:21:27.413Z\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  isChatting: false,\r\n};\r\n\r\nconst chatReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case CHANGE_CHAT: {\r\n      return {\r\n        ...state,\r\n        isChatting: true,\r\n        selectedChatId: payload.userId,\r\n      };\r\n    }\r\n    case SEND_MESSAGE_SUCCESS: {\r\n      const { userId, message } = payload;\r\n      const newMessage = {\r\n        messageId: v4(),\r\n        text: message,\r\n        isAuthor: true,\r\n        date: new Date().toISOString(),\r\n      };\r\n      const newChats = state.chats.map((chat) => {\r\n        if (chat.userId !== userId) {\r\n          return chat;\r\n        }\r\n        return {\r\n          ...chat,\r\n          messageHistory: [...chat.messageHistory, newMessage],\r\n        };\r\n      });\r\n      return {\r\n        ...state,\r\n        chats: newChats,\r\n      };\r\n    }\r\n    case GET_RANDOM_ANSWER_SUCCESS: {\r\n      const { userId, message } = payload;\r\n      const newMessage = {\r\n        messageId: v4(),\r\n        text: message,\r\n        isAuthor: false,\r\n        date: new Date().toISOString(),\r\n      };\r\n      const newChats = state.chats.map((chat) => {\r\n        if (chat.userId !== userId) {\r\n          return chat;\r\n        }\r\n        return {\r\n          ...chat,\r\n          messageHistory: [...chat.messageHistory, newMessage],\r\n        };\r\n      });\r\n      return {\r\n        ...state,\r\n        chats: newChats,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default chatReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport chatReducer from \"../containers/ChatContainer/reducer\";\r\n\r\nexport default combineReducers({\r\n  chat: chatReducer,\r\n});\r\n","function getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport default getRandomIntInclusive;\r\n","import { all, put, call, takeEvery, delay } from \"redux-saga/effects\";\r\nimport {\r\n  SEND_MESSAGE,\r\n  SEND_MESSAGE_SUCCESS,\r\n  GET_RANDOM_ANSWER_SUCCESS,\r\n} from \"./actionTypes\";\r\nimport axios from \"axios\";\r\nimport getRandomIntInclusive from \"../../helpers/getRandomIntInclusive\";\r\n\r\nfunction* getRandomAnswer({ payload }) {\r\n  yield put({\r\n    type: SEND_MESSAGE_SUCCESS,\r\n    payload,\r\n  });\r\n  const response = yield call(\r\n    axios.get,\r\n    \"https://api.chucknorris.io/jokes/random\"\r\n  );\r\n  const answer = response.data.value;\r\n  yield delay(1000 * getRandomIntInclusive(10, 15));\r\n  yield put({\r\n    type: GET_RANDOM_ANSWER_SUCCESS,\r\n    payload: { userId: payload.userId, message: answer },\r\n  });\r\n}\r\n\r\nfunction* watchGetRandomAnswer() {\r\n  yield takeEvery(SEND_MESSAGE, getRandomAnswer);\r\n}\r\n\r\nexport default function* chatSaga() {\r\n  yield all([watchGetRandomAnswer()]);\r\n}\r\n","import { all } from \"redux-saga/effects\";\r\nimport chatSaga from \"../containers/ChatContainer/sagas\";\r\n\r\nexport function* rootSaga() {\r\n  yield all([chatSaga()]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport reducers from \"./reducers\";\r\nimport { rootSaga } from \"./sagas\";\r\n\r\nconst saga = createSagaMiddleware();\r\n\r\nconst persistedState = localStorage.getItem(\"reduxState\")\r\n  ? JSON.parse(localStorage.getItem(\"reduxState\"))\r\n  : {};\r\n\r\nconst composeEnhancers =\r\n  typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n    : compose;\r\n\r\nconst enhancer = composeEnhancers(applyMiddleware(saga));\r\n\r\nconst store = createStore(reducers, persistedState, enhancer);\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem(\"reduxState\", JSON.stringify(store.getState()));\r\n});\r\n\r\nsaga.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport \"./App.css\";\n\nimport { HomePage } from \"./pages/\";\nimport store from \"./store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <HomePage />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}